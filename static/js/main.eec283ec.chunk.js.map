{"version":3,"sources":["hooks/use-input.js","components/BasicForm.js","App.js","index.js"],"names":["useInput","validateValue","useState","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","value","isValid","hasError","valueChangeHandler","event","target","inputBlurHandler","reset","isNotEmpty","trim","isEmail","includes","BasicForm","props","firstNameValue","firstNameIsValid","firstNameHasError","firstNameChangeHandler","firstNameBlurHandler","resetFirstNameInput","lastNameValue","lastNameIsValid","lastNameHasError","lastNameChangeHandler","lastNameBlurHandler","resetLastNameInput","emailValue","emailIsValid","emailHasError","emailChangeHandler","emailBlurHandler","resetEmailNameInput","formIsValid","firstNameClasses","lasttNameClasses","emailClasses","onSubmit","preventDefault","console","log","className","htmlFor","type","id","onChange","onBlur","disabled","App","ReactDOM","render","document","getElementById"],"mappings":"mLAgCeA,EA9BE,SAACC,GAChB,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAeN,EAAcE,GAgBnC,MAAO,CACLK,MAAOL,EACPM,QAASF,EACTG,UAlBgBH,GAAgBF,EAmBhCM,mBAjByB,SAACC,GAC1BR,EAAgBQ,EAAMC,OAAOL,QAiB7BM,iBAduB,SAACF,GACxBN,GAAa,IAcbS,MAXY,WACVX,EAAgB,IAChBE,GAAa,M,OCjBbU,EAAa,SAACR,GAAD,MAA4B,KAAjBA,EAAMS,QAC9BC,EAAU,SAACV,GAAD,MAA4B,KAAjBA,EAAMS,QAAiBT,EAAMW,SAAgB,SA4GzDC,EA1GG,SAACC,GACjB,MAOIrB,EAASgB,GANJM,EADT,EACEd,MACSe,EAFX,EAEEd,QACUe,EAHZ,EAGEd,SACoBe,EAJtB,EAIEd,mBACkBe,EALpB,EAKEZ,iBACOa,EANT,EAMEZ,MAGF,EAOIf,EAASgB,GANJY,EADT,EACEpB,MACSqB,EAFX,EAEEpB,QACUqB,EAHZ,EAGEpB,SACoBqB,EAJtB,EAIEpB,mBACkBqB,EALpB,EAKElB,iBACOmB,EANT,EAMElB,MAGF,EAOIf,EAASkB,GANJgB,EADT,EACE1B,MACS2B,EAFX,EAEE1B,QACU2B,EAHZ,EAGE1B,SACoB2B,EAJtB,EAIE1B,mBACkB2B,EALpB,EAKExB,iBACOyB,EANT,EAMExB,MAGEyB,GAAc,EAEdjB,GAAoBM,GAAmBM,IACzCK,GAAc,GAGhB,IAcMC,EAAmBjB,EACrB,uBACA,eACEkB,EAAmBZ,EACrB,uBACA,eACEa,EAAeP,EAAgB,uBAAyB,eAE9D,OACE,uBAAMQ,SAvBc,SAAChC,GACrBA,EAAMiC,iBAEDL,IAILM,QAAQC,IAAI,eACZD,QAAQC,IAAIzB,EAAgBM,EAAeM,GAC3CP,IACAM,IACAM,MAYA,UACE,sBAAKS,UAAU,gBAAf,UACE,sBAAKA,UAAWP,EAAhB,UACE,uBAAOQ,QAAQ,OAAf,wBACA,uBACEC,KAAK,OACLC,GAAG,OACH3C,MAAOc,EACP8B,SAAU3B,EACV4B,OAAQ3B,IAETF,GACC,mBAAGwB,UAAU,aAAb,2CAGJ,sBAAKA,UAAWN,EAAhB,UACE,uBAAOO,QAAQ,OAAf,uBACA,uBACEC,KAAK,OACLC,GAAG,OACH3C,MAAOoB,EACPwB,SAAUrB,EACVsB,OAAQrB,IAETF,GACC,mBAAGkB,UAAU,aAAb,6CAIN,sBAAKA,UAAWL,EAAhB,UACE,uBAAOM,QAAQ,OAAf,4BACA,uBACEC,KAAK,OACLC,GAAG,OACH3C,MAAO0B,EACPkB,SAAUf,EACVgB,OAAQf,IAETF,GACC,mBAAGY,UAAU,aAAb,oDAGJ,qBAAKA,UAAU,eAAf,SACE,wBAAQM,UAAWd,EAAnB,0BC9FOe,MARf,WACE,OACE,qBAAKP,UAAU,MAAf,SACE,cAAC,EAAD,OCDNQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.eec283ec.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useInput = (validateValue) => {\r\n  const [enteredValue, setEnteredValue] = useState(\"\");\r\n  const [isTouched, setIsTouched] = useState(false);\r\n\r\n  const valueIsValid = validateValue(enteredValue);\r\n  const hasError = !valueIsValid && isTouched;\r\n\r\n  const valueChangeHandler = (event) => {\r\n    setEnteredValue(event.target.value);\r\n  };\r\n\r\n  const inputBlurHandler = (event) => {\r\n    setIsTouched(true);\r\n  };\r\n\r\n  const reset = () => {\r\n      setEnteredValue('');\r\n      setIsTouched(false);\r\n  }\r\n\r\n  return {\r\n    value: enteredValue,\r\n    isValid: valueIsValid,\r\n    hasError,\r\n    valueChangeHandler,\r\n    inputBlurHandler,\r\n    reset\r\n  };\r\n};\r\n\r\nexport default useInput;\r\n","import useInput from \"../hooks/use-input\";\n\nconst isNotEmpty = (value) => value.trim() !== \"\";\nconst isEmail = (value) => value.trim() !== \"\" && value.includes(\"@\" && \".com\");\n\nconst BasicForm = (props) => {\n  const {\n    value: firstNameValue,\n    isValid: firstNameIsValid,\n    hasError: firstNameHasError,\n    valueChangeHandler: firstNameChangeHandler,\n    inputBlurHandler: firstNameBlurHandler,\n    reset: resetFirstNameInput,\n  } = useInput(isNotEmpty);\n\n  const {\n    value: lastNameValue,\n    isValid: lastNameIsValid,\n    hasError: lastNameHasError,\n    valueChangeHandler: lastNameChangeHandler,\n    inputBlurHandler: lastNameBlurHandler,\n    reset: resetLastNameInput,\n  } = useInput(isNotEmpty);\n\n  const {\n    value: emailValue,\n    isValid: emailIsValid,\n    hasError: emailHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailNameInput,\n  } = useInput(isEmail);\n\n  let formIsValid = false;\n\n  if (firstNameIsValid && lastNameIsValid && emailIsValid) {\n    formIsValid = true;\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    if (!formIsValid) {\n      return;\n    }\n\n    console.log(\"Submitted !\");\n    console.log(firstNameValue, lastNameValue, emailValue);\n    resetFirstNameInput();\n    resetLastNameInput();\n    resetEmailNameInput();\n  };\n\n  const firstNameClasses = firstNameHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n  const lasttNameClasses = lastNameHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n  const emailClasses = emailHasError ? \"form-control invalid\" : \"form-control\";\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"control-group\">\n        <div className={firstNameClasses}>\n          <label htmlFor=\"name\">First Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            value={firstNameValue}\n            onChange={firstNameChangeHandler}\n            onBlur={firstNameBlurHandler}\n          />\n          {firstNameHasError && (\n            <p className=\"error-text\">Please enter a first name.</p>\n          )}\n        </div>\n        <div className={lasttNameClasses}>\n          <label htmlFor=\"name\">Last Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            value={lastNameValue}\n            onChange={lastNameChangeHandler}\n            onBlur={lastNameBlurHandler}\n          />\n          {lastNameHasError && (\n            <p className=\"error-text\">Please enter a last name.</p>\n          )}\n        </div>\n      </div>\n      <div className={emailClasses}>\n        <label htmlFor=\"name\">E-Mail Address</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          value={emailValue}\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n        />\n        {emailHasError && (\n          <p className=\"error-text\">Please enter a valid email address.</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n","// import SimpleInput from './components/SimpleInput';\nimport BasicForm from './components/BasicForm';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <BasicForm />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}